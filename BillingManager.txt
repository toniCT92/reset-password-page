package com.toni.dicerollerapp.billing

import android.app.Activity
import android.content.Context
import android.util.Log
import com.android.billingclient.api.*
import com.google.firebase.firestore.FirebaseFirestore
import com.toni.dicerollerapp.storage.AppSettingsManager
import com.toni.dicerollerapp.PriceManager


class BillingManager(
    private val context: Context,
    private val userId: String
) : PurchasesUpdatedListener {

    private val billingClient = BillingClient.newBuilder(context)
        .enablePendingPurchases()
        .setListener(this)
        .build()

    private val productCatalog = mapOf(
        "bundle_gold" to PurchaseInfo("Gold Bundle", listOf("dice_d2_coin", "dice_d6_coin", "bg_gold")),
        "bundle_wooden" to PurchaseInfo("Wooden Bundle", listOf("dice_d2_wooden", "dice_d6_wooden", "bg_wooden")),
        "bundle_galaxy" to PurchaseInfo("Galaxy Bundle", listOf("dice_d2_moon", "dice_d4_galaxy", "dice_d6_galaxy", "bg_galaxy")),
        "bundle_rainbow" to PurchaseInfo("Rainbow Bundle", listOf("dice_d6_rainbow", "dice_d12_rainbow", "bg_rainbow")),
        "premium_access" to PurchaseInfo("Premium Access", listOf("dice_d6_white", "dice_d6_black")),

        // Individual items
        "skin_d2_coin" to PurchaseInfo("Coin d2", listOf("dice_d2_coin")),
        "skin_d2_wooden" to PurchaseInfo("Wooden d2", listOf("dice_d2_wooden")),
        "skin_d2_moon" to PurchaseInfo("Moon d2", listOf("dice_d2_moon")),
        "skin_d4_galaxy" to PurchaseInfo("Galaxy d4", listOf("dice_d4_galaxy")),
        "skin_d6_coin" to PurchaseInfo("Coin d6", listOf("dice_d6_coin")),
        "skin_d6_wooden" to PurchaseInfo("Wooden d6", listOf("dice_d6_wooden")),
        "skin_d6_rainbow" to PurchaseInfo("Rainbow d6", listOf("dice_d6_rainbow")),
        "skin_d6_galaxy" to PurchaseInfo("Galaxy d6", listOf("dice_d6_galaxy")),
        "skin_d12_rainbow" to PurchaseInfo("Rainbow d12", listOf("dice_d12_rainbow"))
    )
    private var purchaseSuccessCallback: (() -> Unit)? = null


    data class PurchaseInfo(val bundleName: String, val items: List<String>)

    private var onBillingSetupFinished: (() -> Unit)? = null

    fun setOnBillingSetupFinishedListener(listener: () -> Unit) {
        onBillingSetupFinished = listener
    }


    fun startConnection() {
        billingClient.startConnection(object : BillingClientStateListener {
            override fun onBillingSetupFinished(billingResult: BillingResult) {
                if (billingResult.responseCode == BillingClient.BillingResponseCode.OK) {
                    Log.d("BillingManager", "‚úÖ BillingClient is ready")
                    onBillingSetupFinished?.invoke() // üî• Notifies MainActivity
                }
            }

            override fun onBillingServiceDisconnected() {
                Log.w("BillingManager", "‚ùå Billing service disconnected")
            }
        })
    }

    fun queryOwnedItems(onResult: (Map<String, Boolean>) -> Unit) {
        billingClient.queryPurchasesAsync(
            QueryPurchasesParams.newBuilder().setProductType(BillingClient.ProductType.INAPP).build()
        ) { _, purchases ->
            val ownedItems = mutableMapOf<String, Boolean>()
            purchases.forEach { purchase ->
                purchase.products.forEach { productId ->
                    ownedItems[productId] = true
                }
            }
            onResult(ownedItems)
        }
    }



    fun launchPurchaseFlow(activity: Activity, productId: String, onPurchaseSuccess: (() -> Unit)? = null) {
        val params = QueryProductDetailsParams.newBuilder()
            .setProductList(
                listOf(
                    QueryProductDetailsParams.Product.newBuilder()
                        .setProductId(productId)
                        .setProductType(BillingClient.ProductType.INAPP)
                        .build()
                )
            ).build()

        billingClient.queryProductDetailsAsync(params) { billingResult, productDetailsList ->
            if (billingResult.responseCode == BillingClient.BillingResponseCode.OK) {
                productDetailsList.firstOrNull()?.let { productDetails ->
                    val flowParams = BillingFlowParams.newBuilder()
                        .setProductDetailsParamsList(
                            listOf(
                                BillingFlowParams.ProductDetailsParams.newBuilder()
                                    .setProductDetails(productDetails)
                                    .build()
                            )
                        ).build()

                    billingClient.launchBillingFlow(activity, flowParams)
                    // Save the callback for later use
                    purchaseSuccessCallback = onPurchaseSuccess
                }
            }
        }
    }


    override fun onPurchasesUpdated(result: BillingResult, purchases: MutableList<Purchase>?) {
        if (result.responseCode == BillingClient.BillingResponseCode.OK && purchases != null) {
            for (purchase in purchases) {
                if (purchase.purchaseState == Purchase.PurchaseState.PURCHASED && !purchase.isAcknowledged) {
                    acknowledgeAndSave(purchase)
                }
            }
        }
    }

    private fun acknowledgeAndSave(purchase: Purchase) {
        val acknowledgeParams = AcknowledgePurchaseParams.newBuilder()
            .setPurchaseToken(purchase.purchaseToken)
            .build()

        billingClient.acknowledgePurchase(acknowledgeParams) { result ->
            if (result.responseCode == BillingClient.BillingResponseCode.OK) {
                val productId = purchase.products.firstOrNull() ?: return@acknowledgePurchase
                if (productId == "premium_access") {
                    AppSettingsManager.saveHasPremium(context, true)
                }

                val info = productCatalog[productId] ?: return@acknowledgePurchase

                val id = purchase.orderId ?: purchase.purchaseToken
                savePurchaseToFirestore(id, info.bundleName, info.items)

                // ‚úÖ Invoke the UI callback
                purchaseSuccessCallback?.invoke()
                purchaseSuccessCallback = null
            }
        }
    }

    fun getBundleInfo(productId: String): PurchaseInfo {
        return productCatalog[productId] ?: PurchaseInfo("Unknown", emptyList())
    }



    private fun savePurchaseToFirestore(purchaseId: String, bundleName: String, items: List<String>) {
        val db = FirebaseFirestore.getInstance()
        val purchaseData = mapOf(
            "bundleName" to bundleName,
            "timestamp" to System.currentTimeMillis(),
            "items" to items
        )

        db.collection("users").document(userId)
            .collection("purchases").document(purchaseId)
            .set(purchaseData)
            .addOnSuccessListener {
                Log.d("Firestore", "‚úÖ Purchase $bundleName saved.")
            }
            .addOnFailureListener {
                Log.e("Firestore", "‚ùå Failed to save $bundleName", it)
            }
    }

    fun queryProductDetails(callback: (Map<String, ProductDetails>) -> Unit) {
        Log.d("BillingDebug", "üõí Querying product IDs: ${PriceManager.itemIds}")
        Log.d("BillingDebug", "‚öôÔ∏è BillingClient is ready: ${billingClient.isReady}")

        val productList = PriceManager.itemIds.map {
            QueryProductDetailsParams.Product.newBuilder()
                .setProductId(it)
                .setProductType(BillingClient.ProductType.INAPP)
                .build()
        }

        val params = QueryProductDetailsParams.newBuilder().setProductList(productList).build()

        billingClient.queryProductDetailsAsync(params) { billingResult, productDetailsList ->
            Log.d("BillingDebug", "üì¶ Billing result code: ${billingResult.responseCode} (${billingResult.debugMessage})")
            Log.d("BillingDebug", "‚úÖ Received ${productDetailsList.size} product(s) from Google")

            // üî• Always log each product returned, even if responseCode isn't OK
            productDetailsList.forEach {
                Log.d("BillingDebug", "‚û°Ô∏è Product ID: ${it.productId} | Price: ${it.oneTimePurchaseOfferDetails?.formattedPrice}")
            }

            if (billingResult.responseCode == BillingClient.BillingResponseCode.OK) {
                callback(productDetailsList.associateBy { it.productId })
            }
        }
    }


}
